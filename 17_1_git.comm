             

---after the changes---
git add file_name 
git checkout # get last version of file in repository
 git reset 17_1_git.comm # reset file from stage , if you decide not to commit the change into repo
-----git logs----
git log --oneline # look over log
git log --pretty=oneline # full id in oneline 
git log --pretty=oneline --max-count=2 
git log --pretty=oneline --until='5 minutes ago' 
git log --pretty=oneline --author=ildar 
git log --pretty=oneline --all 
git log --all --pretty=format:"%h %cd %s (%an)" --since='7 days ago'
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short 

git checkout 4fee2df # switch to branch 4fee...
git checkout master # return back to master branch
git tag v1 # add tag to branche 
git checkout v1^ # switch to parent branche for v1
git tag # list tags 
git tag v1-beta # tag previous branch
git checkout v1 # switch again to v1
ghi master --all # list all branches with master and tags
git reset HEAD hello.html # to cansel staged changes in buffer zone(stage-cache)
git revert HEAD # revert HEAD (last, master branch, or id branche in hist)

 ---- Removing a commit from a branch ---
git reset --hard 18bd54d # reset master branch to commit 18bd...
git reset --hard 18bd54d # reset master branch to commit 18bd...with restore work dir 
git reset --soft 18bd54d # reset master branch to commit 18bd...work dir - not changed; stage - show modified fixation; 
git reset --mixed 18bd54d # reset master branch to commit 18bd...work dir - not changed; stage - cleaned; 
git tag -d oops # delete tag (commit from --all list);
git commit --amend -m "Add an author/email comment" # amending (changing the current commit ) 

---- Moving files ----
 git mv hello.html lib # mov file to lib dir
# ^ = mkdir lib
     mv hello.html lib
     git add lib/hello.html
     git rm hello.html
########--------------



 -----inside Git-----
ls -C .git # list dir .git 
ls -C .git/objects # obj database 
ls -C .git/objects/00 # list encrypted and compressed stored objects in git.
cat .git/config # config file for each project
ls .git/refs  # refereances 
ls .git/refs/heads/ 
ls .git/refs/tags 
cat .git/refs/tags/v1 
ls .git/HEAD

----direct work with git obj----
ghi --max-count=1 # list last commit
git cat-file -t f42d6c1 # get info 
git cat-file -p f42d6c1 # get info more 
you may create aliases: git type | git dump 
 git cat-file -p 871a65 # get ingo about tree 
git cat-file -p 958703 # display info about lib dir 
git cat-file -p 39b7011 # cat info from hello.html file 
